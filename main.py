import telebot as tb
from telebot import types


API_TOKEN = ''

bot = tb.TeleBot(API_TOKEN)

# Saving portfolio of users
users = {}

def keyboard_reply():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    button_1 = types.KeyboardButton("–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—Éüíå")
    keyboard.add(button_1)
    return keyboard


# Command /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    keyboard = keyboard_reply()
    msg = bot.send_message(message.chat.id, "<b>–ü—Ä–∏–≤—ñ—Ç, —Ü–µ —Ç–≥ –±–æ—Ç –∑–Ω–∞–π–æ–º—Å—Ç–≤, –≤ —è–∫–æ–º—É —Ç–∏ –∑–º–æ–∂–µ—à –∑–Ω–∞–π—Ç–∏ —Å–æ–±—ñ –ø–∞—Ä—É –∞–±–æ –¥—Ä—É–≥–∞</b>", parse_mode="html", reply_markup=keyboard)
    bot.register_next_step_handler(msg, create_profile)


# Creating of the portfolio
@bot.message_handler(commands=['Create_profile'])
def create_profile(message):
    bot.send_message(message.chat.id, "<b>–ó–∞—á–µ–∫–∞–π—Ç–µ, –≤–∏–¥–∞–ª—è—î–º–æ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ –∫–Ω–æ–ø–∫–∏üîÑ.....</b>", reply_markup=types.ReplyKeyboardRemove(), parse_mode="html")
    msg = bot.reply_to(message, "<b>–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:</b>", parse_mode='html')
    bot.register_next_step_handler(msg, process_name_step)


def process_name_step(message):
    chat_id = message.chat.id
    name = message.text
    users[chat_id] = {'name': name}
    msg = bot.reply_to(message, "<b>–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫:</b>", parse_mode='html')
    bot.register_next_step_handler(msg, process_age_step)


def process_age_step(message):
    chat_id = message.chat.id
    try:
        age = int(message.text)
        users[chat_id]['age'] = age
        msg = bot.reply_to(message, "<b>–ù–∞–ø–∏—à—ñ—Ç—å –∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –ø—Ä–æ —Å–µ–±–µ:</b>", parse_mode='html')
        bot.register_next_step_handler(msg, process_bio_step)
    except ValueError:
        msg = bot.reply_to(message, "<b>–í—ñ–∫ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫ —â–µ —Ä–∞–∑:</b>", parse_mode='html')
        bot.register_next_step_handler(msg, process_age_step)


def process_bio_step(message):
    chat_id = message.chat.id
    bio = message.text
    users[chat_id]['bio'] = bio
    msg = bot.reply_to(message, "<b>–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é:</b>", parse_mode='html')
    bot.register_next_step_handler(msg, process_photo_step)


def process_photo_step(message):
    chat_id = message.chat.id
    if message.content_type != 'photo':
        msg = bot.reply_to(message, "<b>–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é.</b>", parse_mode='html')
        bot.register_next_step_handler(msg, process_photo_step)
        return

    photo_file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º–æ —Ñ–æ—Ç–æ –Ω–∞–π–≤–∏—â–æ—ó —è–∫–æ—Å—Ç—ñ
    users[chat_id]['photo'] = photo_file_id
    bot.reply_to(message, "<b>–ê–Ω–∫–µ—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞!‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <u>/show_profiles</u> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–Ω–∫–µ—Ç —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.</b>", parse_mode='html')


# –ü–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–∫–µ—Ç —Ç–∞ –æ—Ü—ñ–Ω–∫–∞
@bot.message_handler(commands=['show_profiles'])
def show_profiles(message):
    chat_id = message.chat.id
    if not users:
        bot.reply_to(message, "<b>–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–Ω–∫–µ—Ç, –∞–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å –≤ –Ω–∞—à–æ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –Ω–∞ —Å—Ç–æ –≥—Ä–Ω, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ /info</b>", parse_mode='html')
        return

    for user_id, profile in users.items():
        if user_id != chat_id:  # Don't show portfolio to user which created it
            # Sending portfolio
            bot.send_message(chat_id, f"–Ü–º'—è: {profile['name']}\n–í—ñ–∫: {profile['age']}\n–ü—Ä–æ —Å–µ–±–µ: {profile['bio']}")
            bot.send_photo(chat_id, profile['photo'])

            # Creating two buttons, called like and dislike
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            like_button = types.InlineKeyboardButton(text="üëç –õ–∞–π–∫", callback_data=f"like_{user_id}")
            dislike_button = types.InlineKeyboardButton(text="üëé –î–∏–∑–ª–∞–π–∫", callback_data=f"dislike_{user_id}")
            keyboard.add(like_button, dislike_button)
            bot.send_message(chat_id, "–û—Ü—ñ–Ω—ñ—Ç—å –∞–Ω–∫–µ—Ç—É:", reply_markup=keyboard)


# Pressing of the buttons corectly
@bot.callback_query_handler(func=lambda call: call.data.startswith("like_") or call.data.startswith("dislike_"))
def handle_vote(call):
    action, user_id = call.data.split("_")
    liker_id = call.message.chat.id  # ID of the user who send like
    if action == "like":
        bot.answer_callback_query(call.id, "–í–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!")

        # Sending a message to a user who you send a like or  dislike
        bot.send_message(user_id, f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–ø–æ–¥–æ–±–∞–ª–∞—Å—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {users[liker_id]['name']}!")
    elif action == "dislike":
        bot.answer_callback_query(call.id, "–í–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫!")

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è


bot.polling(none_stop=True)
